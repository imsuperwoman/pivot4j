/* The following code was generated by JFlex 1.4.3 on 3/20/15 4:23 PM */

/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 */
package org.pivot4j.mdx.impl;

import org.pivot4j.mdx.*;
import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("unused")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/20/15 4:23 PM from the specification file
 * <tt>C:/dev/pivot4j/pivot4j-core/src/main/parser/mdxparse.jlex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_AS2 = 4;
  public static final int AFTER_AS1 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\35\1\0\2\35\22\0\1\31\1\0\1\34\1\0"+
    "\1\61\1\0\1\62\1\36\1\54\1\55\1\56\1\44\1\50\1\45"+
    "\1\46\1\57\12\43\1\47\1\0\1\52\1\51\1\53\2\0\1\1"+
    "\1\23\1\5\1\3\1\6\1\22\1\17\1\15\1\10\2\32\1\7"+
    "\1\11\1\2\1\25\1\20\1\32\1\13\1\4\1\14\1\16\1\27"+
    "\1\26\1\30\1\21\1\32\1\40\1\0\1\37\1\0\1\33\1\0"+
    "\1\1\1\23\1\5\1\3\1\24\1\22\1\17\1\15\1\10\2\32"+
    "\1\7\1\11\1\2\1\12\1\20\1\32\1\13\1\4\1\14\1\16"+
    "\1\27\1\26\1\30\1\21\1\32\1\41\1\60\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\22\3\1\4\3\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\3\2\1\24\1\25\1\3"+
    "\1\26\15\3\1\27\3\3\1\30\4\3\1\0\1\31"+
    "\2\0\1\32\1\0\1\7\1\33\1\34\1\35\1\36"+
    "\3\0\1\37\1\40\1\41\2\3\1\42\1\3\1\43"+
    "\2\3\1\44\13\3\1\45\1\7\1\0\1\46\1\0"+
    "\1\47\1\1\3\3\1\50\1\51\1\52\4\3\1\53"+
    "\1\3\1\54\1\55\1\56\2\3\1\0\3\3\1\57"+
    "\4\3\1\60\3\3\1\61\2\3\1\62\16\3\1\63"+
    "\1\3\1\64\1\65\1\3\1\66\1\3\1\67\1\3"+
    "\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\231\0\u0462"+
    "\0\u0495\0\u04c8\0\231\0\231\0\u04fb\0\231\0\231\0\u052e"+
    "\0\231\0\231\0\231\0\u0561\0\u0594\0\231\0\231\0\231"+
    "\0\231\0\u05c7\0\u05fa\0\u062d\0\231\0\231\0\u0660\0\u01fe"+
    "\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u01fe\0\u092a\0\u095d"+
    "\0\u0990\0\u01fe\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0462\0\231"+
    "\0\u0495\0\u04c8\0\u0a8f\0\u0ac2\0\u0af5\0\231\0\231\0\231"+
    "\0\231\0\u0b28\0\u0b5b\0\u0b8e\0\u01fe\0\u01fe\0\u01fe\0\u0bc1"+
    "\0\u0bf4\0\u01fe\0\u0c27\0\u01fe\0\u0c5a\0\u0c8d\0\u01fe\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u01fe\0\u0ef1\0\u0ef1\0\u0f24\0\u0f57\0\u0b5b"+
    "\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u01fe\0\u01fe\0\u01fe\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u01fe\0\u1122\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u1155\0\u1188\0\u062d\0\u11bb\0\u11ee\0\u1221\0\u01fe\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u01fe\0\u1320\0\u1353\0\u1386\0\u01fe"+
    "\0\u13b9\0\u13ec\0\u01fe\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u01fe\0\u16e9\0\u01fe\0\u01fe\0\u171c\0\u01fe\0\u174f"+
    "\0\u01fe\0\u1782\0\u01fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\13\1\17\3\13\1\20\1\13"+
    "\1\21\1\13\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\13\1\4\1\30\1\27\1\31\1\4\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\13\1\17\3\13\1\20"+
    "\1\13\1\21\1\13\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\13\1\4\1\30\1\27\1\55\1\4\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\17\3\13"+
    "\1\20\1\13\1\21\1\13\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\13\1\4\1\30\1\27\1\56\1\4"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\64\0\1\13\1\57\1\13\1\60"+
    "\24\13\1\0\2\13\7\0\1\13\20\0\11\13\1\61"+
    "\12\13\1\61\3\13\1\0\2\13\7\0\1\13\20\0"+
    "\7\13\1\62\2\13\1\63\15\13\1\0\2\13\7\0"+
    "\1\13\20\0\1\64\4\13\1\65\15\13\1\65\4\13"+
    "\1\0\2\13\7\0\1\13\20\0\1\66\4\13\1\67"+
    "\15\13\1\67\4\13\1\0\2\13\7\0\1\13\20\0"+
    "\1\13\1\70\4\13\1\71\1\13\1\72\16\13\1\73"+
    "\1\0\2\13\7\0\1\13\20\0\30\13\1\0\2\13"+
    "\7\0\1\13\20\0\1\13\1\74\26\13\1\0\2\13"+
    "\7\0\1\13\20\0\5\13\1\75\15\13\1\75\4\13"+
    "\1\0\2\13\7\0\1\13\20\0\1\13\1\76\26\13"+
    "\1\0\2\13\7\0\1\13\20\0\14\13\1\77\13\13"+
    "\1\0\2\13\7\0\1\13\20\0\12\13\1\100\15\13"+
    "\1\0\2\13\7\0\1\13\20\0\12\13\1\101\15\13"+
    "\1\0\2\13\7\0\1\13\20\0\1\13\1\70\4\13"+
    "\1\71\1\13\1\72\1\13\1\102\14\13\1\73\1\0"+
    "\2\13\7\0\1\13\20\0\1\13\1\76\10\13\1\102"+
    "\15\13\1\0\2\13\7\0\1\13\20\0\7\13\1\103"+
    "\4\13\1\104\13\13\1\0\2\13\7\0\1\13\20\0"+
    "\1\105\27\13\1\0\2\13\7\0\1\13\20\0\11\13"+
    "\1\106\12\13\1\106\3\13\1\0\2\13\7\0\1\13"+
    "\17\0\34\107\1\110\1\0\25\107\35\111\1\0\1\110"+
    "\24\111\35\112\1\0\1\112\1\113\23\112\6\0\1\114"+
    "\15\0\1\114\16\0\1\35\2\0\1\115\57\0\1\115"+
    "\70\0\1\116\1\0\1\117\60\0\1\120\71\0\1\121"+
    "\42\0\1\122\1\123\61\0\1\124\23\0\2\13\1\125"+
    "\25\13\1\0\2\13\7\0\1\13\20\0\1\13\1\126"+
    "\11\13\1\127\14\13\1\0\2\13\7\0\1\13\20\0"+
    "\10\13\1\130\17\13\1\0\2\13\7\0\1\13\20\0"+
    "\7\13\1\131\20\13\1\0\2\13\7\0\1\13\20\0"+
    "\17\13\1\132\10\13\1\0\2\13\7\0\1\13\20\0"+
    "\6\13\1\133\4\13\1\134\14\13\1\0\2\13\7\0"+
    "\1\13\20\0\3\13\1\135\24\13\1\0\2\13\7\0"+
    "\1\13\20\0\6\13\1\136\21\13\1\0\2\13\7\0"+
    "\1\13\20\0\2\13\1\137\25\13\1\0\2\13\7\0"+
    "\1\13\20\0\3\13\1\140\24\13\1\0\2\13\7\0"+
    "\1\13\20\0\17\13\1\141\10\13\1\0\2\13\7\0"+
    "\1\13\20\0\4\13\1\142\23\13\1\0\2\13\7\0"+
    "\1\13\20\0\4\13\1\143\23\13\1\0\2\13\7\0"+
    "\1\13\20\0\10\13\1\144\17\13\1\0\2\13\7\0"+
    "\1\13\20\0\5\13\1\145\15\13\1\145\4\13\1\0"+
    "\2\13\7\0\1\13\20\0\11\13\1\146\12\13\1\146"+
    "\3\13\1\0\2\13\7\0\1\13\20\0\11\13\1\147"+
    "\12\13\1\147\3\13\1\0\2\13\7\0\1\13\20\0"+
    "\13\13\1\150\14\13\1\0\2\13\7\0\1\13\20\0"+
    "\5\13\1\151\15\13\1\151\4\13\1\0\2\13\7\0"+
    "\1\13\20\0\12\13\1\152\15\13\1\0\2\13\7\0"+
    "\1\13\20\0\12\13\1\153\15\13\1\0\2\13\7\0"+
    "\1\13\56\0\1\112\66\0\1\154\2\155\23\0\1\114"+
    "\15\0\1\114\16\0\1\115\17\0\37\122\1\156\23\122"+
    "\37\123\1\157\2\123\1\160\20\123\35\124\1\0\1\124"+
    "\1\161\23\124\1\0\5\13\1\162\15\13\1\162\4\13"+
    "\1\0\2\13\7\0\1\13\20\0\6\13\1\163\21\13"+
    "\1\0\2\13\7\0\1\13\20\0\5\13\1\164\15\13"+
    "\1\164\4\13\1\0\2\13\7\0\1\13\20\0\5\13"+
    "\1\165\15\13\1\165\4\13\1\0\2\13\7\0\1\13"+
    "\20\0\6\13\1\166\21\13\1\0\2\13\7\0\1\13"+
    "\20\0\5\13\1\167\15\13\1\167\4\13\1\0\2\13"+
    "\7\0\1\13\20\0\13\13\1\170\14\13\1\0\2\13"+
    "\7\0\1\13\20\0\6\13\1\171\21\13\1\0\2\13"+
    "\7\0\1\13\20\0\6\13\1\172\21\13\1\0\2\13"+
    "\7\0\1\13\20\0\22\13\1\173\5\13\1\0\2\13"+
    "\7\0\1\13\20\0\1\13\1\174\26\13\1\0\2\13"+
    "\7\0\1\13\20\0\17\13\1\175\10\13\1\0\2\13"+
    "\7\0\1\13\20\0\10\13\1\176\17\13\1\0\2\13"+
    "\7\0\1\13\20\0\14\13\1\177\13\13\1\0\2\13"+
    "\7\0\1\13\20\0\1\13\1\200\10\13\1\201\15\13"+
    "\1\0\2\13\7\0\1\13\20\0\7\13\1\202\20\13"+
    "\1\0\2\13\7\0\1\13\62\0\1\154\56\0\1\122"+
    "\62\0\1\123\62\0\1\124\22\0\1\203\1\0\1\13"+
    "\1\204\26\13\1\0\2\13\7\0\1\13\20\0\6\13"+
    "\1\205\21\13\1\0\2\13\7\0\1\13\20\0\4\13"+
    "\1\206\23\13\1\0\2\13\7\0\1\13\20\0\20\13"+
    "\1\207\7\13\1\0\2\13\7\0\1\13\20\0\15\13"+
    "\1\210\12\13\1\0\2\13\7\0\1\13\20\0\15\13"+
    "\1\211\12\13\1\0\2\13\7\0\1\13\20\0\5\13"+
    "\1\212\15\13\1\212\4\13\1\0\2\13\7\0\1\13"+
    "\20\0\5\13\1\213\15\13\1\213\4\13\1\0\2\13"+
    "\7\0\1\13\20\0\5\13\1\214\15\13\1\214\4\13"+
    "\1\0\2\13\7\0\1\13\20\0\1\215\27\13\1\0"+
    "\2\13\7\0\1\13\20\0\3\13\1\216\24\13\1\0"+
    "\2\13\7\0\1\13\20\0\13\13\1\217\14\13\1\0"+
    "\2\13\7\0\1\13\20\0\13\13\1\220\14\13\1\0"+
    "\2\13\7\0\1\13\20\0\2\13\1\221\25\13\1\0"+
    "\2\13\7\0\1\13\20\0\2\13\1\222\25\13\1\0"+
    "\2\13\7\0\1\13\20\0\12\13\1\223\15\13\1\0"+
    "\2\13\7\0\1\13\20\0\12\13\1\224\15\13\1\0"+
    "\2\13\7\0\1\13\20\0\22\13\1\225\5\13\1\0"+
    "\2\13\7\0\1\13\20\0\7\13\1\226\20\13\1\0"+
    "\2\13\7\0\1\13\20\0\14\13\1\227\13\13\1\0"+
    "\2\13\7\0\1\13\20\0\7\13\1\230\20\13\1\0"+
    "\2\13\7\0\1\13\20\0\7\13\1\231\20\13\1\0"+
    "\2\13\7\0\1\13\20\0\13\13\1\232\14\13\1\0"+
    "\2\13\7\0\1\13\20\0\6\13\1\233\21\13\1\0"+
    "\2\13\7\0\1\13\20\0\11\13\1\234\12\13\1\234"+
    "\3\13\1\0\2\13\7\0\1\13\20\0\12\13\1\235"+
    "\15\13\1\0\2\13\7\0\1\13\20\0\1\13\1\236"+
    "\26\13\1\0\2\13\7\0\1\13\20\0\1\13\1\237"+
    "\26\13\1\0\2\13\7\0\1\13\20\0\7\13\1\240"+
    "\20\13\1\0\2\13\7\0\1\13\20\0\5\13\1\241"+
    "\15\13\1\241\4\13\1\0\2\13\7\0\1\13\20\0"+
    "\1\13\1\242\26\13\1\0\2\13\7\0\1\13\20\0"+
    "\11\13\1\243\12\13\1\243\3\13\1\0\2\13\7\0"+
    "\1\13\20\0\16\13\1\244\11\13\1\0\2\13\7\0"+
    "\1\13\20\0\16\13\1\245\11\13\1\0\2\13\7\0"+
    "\1\13\20\0\5\13\1\246\15\13\1\246\4\13\1\0"+
    "\2\13\7\0\1\13\20\0\3\13\1\247\24\13\1\0"+
    "\2\13\7\0\1\13\20\0\15\13\1\250\12\13\1\0"+
    "\2\13\7\0\1\13\20\0\3\13\1\251\24\13\1\0"+
    "\2\13\7\0\1\13\20\0\16\13\1\252\11\13\1\0"+
    "\2\13\7\0\1\13\20\0\14\13\1\253\13\13\1\0"+
    "\2\13\7\0\1\13\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6069];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\22\1\1\11\3\1\2\11\1\1\2\11"+
    "\1\1\3\11\2\1\4\11\3\1\2\11\30\1\1\0"+
    "\1\11\2\0\1\1\1\0\1\1\4\11\3\0\30\1"+
    "\1\0\1\1\1\0\23\1\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  protected Logger logger = LoggerFactory.getLogger(getClass());


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { yybegin(YYINITIAL); return new Symbol(Symbols.QUOTE, "'");
          }
        case 57: break;
        case 56: 
          { return new Symbol(Symbols.DRILLTHROUGH, "DRILLTHROUGH");
          }
        case 58: break;
        case 12: 
          { return new Symbol(Symbols.COMMA, ",");
          }
        case 59: break;
        case 36: 
          { return new Symbol(Symbols.END, "END");
          }
        case 60: break;
        case 3: 
          { return new Symbol(Symbols.ID, yytext());
          }
        case 61: break;
        case 26: 
          { return new Symbol(Symbols.QUOTED_ID, yytext());
          }
        case 62: break;
        case 10: 
          { return new Symbol(Symbols.DOT, ".");
          }
        case 63: break;
        case 25: 
          { return new Symbol(Symbols.STRING, yytext());
          }
        case 64: break;
        case 49: 
          { return new Symbol(Symbols.SELECT, "SELECT");
          }
        case 65: break;
        case 34: 
          { return new Symbol(Symbols.SAP, "SAP");
          }
        case 66: break;
        case 14: 
          { return new Symbol(Symbols.LT, "<");
          }
        case 67: break;
        case 47: 
          { return new Symbol(Symbols.EMPTY, "EMPTY");
          }
        case 68: break;
        case 54: 
          { return new Symbol(Symbols.VARIABLES, "VARIABLES");
          }
        case 69: break;
        case 4: 
          { /* ignore white space. */
          }
        case 70: break;
        case 50: 
          { return new Symbol(Symbols.MEMBER, "MEMBER");
          }
        case 71: break;
        case 28: 
          { return new Symbol(Symbols.NE, "<>");
          }
        case 72: break;
        case 1: 
          { return new Symbol(Symbols.AMP_QUOTED_ID, yytext());
          }
        case 73: break;
        case 9: 
          { return new Symbol(Symbols.MINUS, "-");
          }
        case 74: break;
        case 48: 
          { return new Symbol(Symbols.WHERE, "WHERE");
          }
        case 75: break;
        case 35: 
          { return new Symbol(Symbols.SET, "SET");
          }
        case 76: break;
        case 51: 
          { return new Symbol(Symbols.DIMENSION, "DIMENSION");
          }
        case 77: break;
        case 44: 
          { return new Symbol(Symbols.FROM, "FROM");
          }
        case 78: break;
        case 13: 
          { return new Symbol(Symbols.EQ, "=");
          }
        case 79: break;
        case 55: 
          { return new Symbol(Symbols.PROPERTIES, "PROPERTIES");
          }
        case 80: break;
        case 27: 
          { return new Symbol(Symbols.LE, "<=");
          }
        case 81: break;
        case 20: 
          { yybegin(AFTER_AS2); return new Symbol(Symbols.QUOTE, "'");
          }
        case 82: break;
        case 11: 
          { return new Symbol(Symbols.COLON, ":");
          }
        case 83: break;
        case 53: 
          { return new Symbol(Symbols.INCLUDING, "INCLUDING");
          }
        case 84: break;
        case 30: 
          { return new Symbol(Symbols.CONCAT, "||");
          }
        case 85: break;
        case 43: 
          { return new Symbol(Symbols.THEN, "THEN");
          }
        case 86: break;
        case 42: 
          { return new Symbol(Symbols.ELSE, "ELSE");
          }
        case 87: break;
        case 17: 
          { return new Symbol(Symbols.RPAREN, ")");
          }
        case 88: break;
        case 33: 
          { return new Symbol(Symbols.NOT, "NOT");
          }
        case 89: break;
        case 41: 
          { return new Symbol(Symbols.CELL, "CELL");
          }
        case 90: break;
        case 23: 
          { return new Symbol(Symbols.ON, "ON");
          }
        case 91: break;
        case 2: 
          { if (logger.isWarnEnabled()) logger.warn("Unmatched input: " + yytext()); return new Symbol(Symbols.UNKNOWN, yytext());
          }
        case 92: break;
        case 7: 
          { Double d = new Double(yytext()); return new Symbol(Symbols.NUMBER, d);
          }
        case 93: break;
        case 39: 
          { return new Symbol(Symbols.VALUE_PARAM, yytext());
          }
        case 94: break;
        case 22: 
          { yybegin(AFTER_AS1); return new Symbol(Symbols.AS, "AS");
          }
        case 95: break;
        case 40: 
          { return new Symbol(Symbols.CASE, "CASE");
          }
        case 96: break;
        case 46: 
          { return new Symbol(Symbols.WHEN, "WHEN");
          }
        case 97: break;
        case 8: 
          { return new Symbol(Symbols.PLUS, "+");
          }
        case 98: break;
        case 38: 
          { return new Symbol(Symbols.MEMBER_PARAM, yytext());
          }
        case 99: break;
        case 15: 
          { return new Symbol(Symbols.GT, ">");
          }
        case 100: break;
        case 29: 
          { return new Symbol(Symbols.GE, ">=");
          }
        case 101: break;
        case 52: 
          { return new Symbol(Symbols.EXCLUDING, "EXCLUDING");
          }
        case 102: break;
        case 19: 
          { return new Symbol(Symbols.SOLIDUS, "/");
          }
        case 103: break;
        case 5: 
          { return new Symbol(Symbols.LBRACE, "{");
          }
        case 104: break;
        case 6: 
          { return new Symbol(Symbols.RBRACE, "}");
          }
        case 105: break;
        case 31: 
          { return new Symbol(Symbols.AND, "AND");
          }
        case 106: break;
        case 45: 
          { return new Symbol(Symbols.WITH, "WITH");
          }
        case 107: break;
        case 32: 
          { return new Symbol(Symbols.NON, "NON");
          }
        case 108: break;
        case 37: 
          { return new Symbol(Symbols.XOR, "XOR");
          }
        case 109: break;
        case 16: 
          { return new Symbol(Symbols.LPAREN, "(");
          }
        case 110: break;
        case 18: 
          { return new Symbol(Symbols.ASTERISK, "*");
          }
        case 111: break;
        case 24: 
          { return new Symbol(Symbols.OR, "OR");
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(Symbols.EOF, null);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
