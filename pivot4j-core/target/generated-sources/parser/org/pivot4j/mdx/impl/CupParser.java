
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 20 16:23:24 SGT 2015
//----------------------------------------------------

package org.pivot4j.mdx.impl;

import org.pivot4j.mdx.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.Reader;
import org.olap4j.Axis;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 20 16:23:24 SGT 2015
  */
public class CupParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CupParser() {super();}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\013\003\000\002\013" +
    "\004\000\002\002\012\000\002\012\002\000\002\012\004" +
    "\000\002\004\002\000\002\004\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\007\000\002\050\002\000\002" +
    "\050\005\000\002\051\003\000\002\051\005\000\002\040" +
    "\002\000\002\040\004\000\002\042\003\000\002\003\003" +
    "\000\002\007\002\000\002\007\004\000\002\010\002\000" +
    "\002\010\005\000\002\011\003\000\002\063\002\000\002" +
    "\011\006\000\002\054\002\000\002\054\005\000\002\057" +
    "\003\000\002\057\005\000\002\056\003\000\002\056\003" +
    "\000\002\055\002\000\002\055\003\000\002\060\004\000" +
    "\002\062\003\000\002\062\004\000\002\061\005\000\002" +
    "\061\005\000\002\061\005\000\002\061\007\000\002\061" +
    "\007\000\002\061\007\000\002\017\003\000\002\017\004" +
    "\000\002\020\003\000\002\020\003\000\002\021\011\000" +
    "\002\021\007\000\002\015\002\000\002\015\004\000\002" +
    "\016\003\000\002\016\005\000\002\014\005\000\002\022" +
    "\010\000\002\022\006\000\002\046\003\000\002\046\005" +
    "\000\002\041\003\000\002\041\003\000\002\052\003\000" +
    "\002\053\003\000\002\023\005\000\002\023\003\000\002" +
    "\044\002\000\002\044\003\000\002\045\003\000\002\045" +
    "\005\000\002\024\003\000\002\024\005\000\002\024\005" +
    "\000\002\030\003\000\002\030\005\000\002\031\003\000" +
    "\002\031\004\000\002\032\003\000\002\032\005\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\034\003\000\002\034\005\000\002\034\005" +
    "\000\002\035\003\000\002\035\004\000\002\035\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\010\000\002\027\010\000\002\027\006\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\026\007\000\002\025\002\000\002" +
    "\025\003\000\002\043\002\000\002\043\004\000\002\037" +
    "\006\000\002\036\002\000\002\036\004\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\010\012\ufffd\026\ufffd\040\006\001\002\000" +
    "\004\002\275\001\002\000\006\012\177\026\201\001\002" +
    "\000\006\017\014\027\013\001\002\000\012\012\uffd4\017" +
    "\uffd4\026\uffd4\027\uffd4\001\002\000\012\012\uffd6\017\014" +
    "\026\uffd6\027\013\001\002\000\006\012\ufffc\026\ufffc\001" +
    "\002\000\012\012\uffd3\017\uffd3\026\uffd3\027\uffd3\001\002" +
    "\000\006\064\015\065\017\001\002\000\006\064\015\065" +
    "\017\001\002\000\120\002\uffc7\004\uffc7\005\uffc7\007\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\022" +
    "\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\001\002\000\030\002\uffc9\005\uffc9" +
    "\007\uffc9\022\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\042" +
    "\uffc9\043\uffc9\045\uffc9\001\002\000\120\002\uffc6\004\uffc6" +
    "\005\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002\000\006" +
    "\005\021\045\022\001\002\000\034\006\050\021\027\025" +
    "\035\051\033\053\032\055\047\057\024\063\041\064\015" +
    "\065\017\067\037\070\031\071\030\001\002\000\006\064" +
    "\015\065\017\001\002\000\030\002\uffc8\005\uffc8\007\uffc8" +
    "\022\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\042\uffc8\043" +
    "\uffc8\045\uffc8\001\002\000\024\006\050\051\033\053\032" +
    "\063\041\064\015\065\017\067\037\070\031\071\030\001" +
    "\002\000\106\002\uffa8\004\uffa8\007\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\017\uffa8\022\uffa8\023\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\037\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\052\uffa8\053\164\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\001\002\000\104\002\uff9d\004" +
    "\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\017\uff9d" +
    "\022\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\033\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\001\002" +
    "\000\032\006\050\021\027\051\033\053\032\055\047\057" +
    "\024\063\041\064\015\065\017\067\037\070\031\071\030" +
    "\001\002\000\104\002\uffc4\004\uffc4\007\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\015\uffc4\017\uffc4\022\uffc4\023\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\037\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\001\002\000\104\002\uffc5\004\uffc5" +
    "\007\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\022" +
    "\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\033\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\052\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000" +
    "\032\006\050\021\027\051\033\053\032\055\047\057\024" +
    "\063\041\064\015\065\017\067\037\070\031\071\030\001" +
    "\002\000\034\006\050\021\027\051\033\053\032\055\047" +
    "\057\024\060\uffc1\063\041\064\015\065\017\067\037\070" +
    "\031\071\030\001\002\000\104\002\uff9f\004\uff9f\007\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\015\uff9f\017\uff9f\022\uff9f\023" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f" +
    "\037\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\052\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000\032\006" +
    "\050\021\027\051\033\053\032\055\047\057\024\063\041" +
    "\064\015\065\017\067\037\070\031\071\030\001\002\000" +
    "\104\002\uff9e\004\uff9e\007\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\015\uff9e\017\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\033\uff9e\037\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\052" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\001\002\000\104\002\uffaa\004\uffaa\007\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\017\uffaa\022\uffaa\023\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\037" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\052\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\001\002\000\020\012\uffd0" +
    "\017\uffd0\023\066\026\uffd0\027\uffd0\037\067\043\143\001" +
    "\002\000\104\002\uffa9\004\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\015\uffa9\017\uffa9\022\uffa9\023\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\037\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\052\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\001\002\000\102\002\uffb0\004\uffb0\007" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\017\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033" +
    "\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\052\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000\102\002\uffb4" +
    "\004\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4\017" +
    "\uffb4\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\033\uffb4\037\uffb4\041\110\042\uffb4\043\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\052\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\111\001\002\000" +
    "\054\002\uffbd\004\071\007\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\015\uffbd\017\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\033\uffbd\037\uffbd\042\uffbd\043\uffbd" +
    "\060\uffbd\061\uffbd\001\002\000\054\002\uffba\004\uffba\007" +
    "\uffba\011\uffba\012\uffba\013\uffba\015\uffba\017\uffba\022\uffba" +
    "\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\033" +
    "\uffba\037\uffba\042\uffba\043\uffba\060\uffba\061\uffba\001\002" +
    "\000\070\002\uffb8\004\uffb8\007\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\015\uffb8\017\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\033\uffb8\037\uffb8\042\uffb8\043" +
    "\uffb8\046\134\047\137\050\135\052\136\054\133\056\140" +
    "\060\uffb8\061\uffb8\001\002\000\024\006\050\051\033\053" +
    "\032\063\041\064\015\065\017\067\037\070\031\071\030" +
    "\001\002\000\040\006\050\013\uff9b\015\uff9b\021\027\031" +
    "\uff9b\051\033\053\032\055\047\057\024\063\041\064\015" +
    "\065\017\067\037\070\031\071\030\001\002\000\076\002" +
    "\uffb6\004\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\017\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\037\uffb6\042\uffb6\043\uffb6\044\105" +
    "\046\uffb6\047\uffb6\050\uffb6\052\uffb6\054\uffb6\055\106\056" +
    "\uffb6\057\104\060\uffb6\061\uffb6\001\002\000\104\002\uffad" +
    "\004\uffad\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad\017" +
    "\uffad\022\uffad\023\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\033\uffad\037\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\053\046\uffad\047\uffad\050\uffad\052\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\001" +
    "\002\000\012\024\060\064\054\065\057\066\055\001\002" +
    "\000\106\002\uffa7\004\uffa7\007\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\015\uffa7\017\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\033\uffa7\037\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\052\uffa7\053\uffc7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\001\002\000\104\002\uffa5\004\uffa5" +
    "\007\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5\022" +
    "\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\033\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\001\002\000" +
    "\004\053\101\001\002\000\106\002\uffa6\004\uffa6\007\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\022\uffa6\023" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6" +
    "\037\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\052\uffa6\053\uffc6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\001\002\000" +
    "\004\053\061\001\002\000\034\006\050\021\027\051\033" +
    "\053\032\055\047\057\024\061\uffc1\063\041\064\015\065" +
    "\017\067\037\070\031\071\030\001\002\000\004\061\100" +
    "\001\002\000\006\060\uffc0\061\uffc0\001\002\000\012\042" +
    "\075\043\074\060\uffbf\061\uffbf\001\002\000\042\002\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\017\uffc2\022\uffc2\023\066\025" +
    "\uffc2\026\uffc2\027\uffc2\033\uffc2\037\067\042\uffc2\043\uffc2" +
    "\060\uffc2\061\uffc2\001\002\000\032\006\050\021\027\051" +
    "\033\053\032\055\047\057\024\063\041\064\015\065\017" +
    "\067\037\070\031\071\030\001\002\000\032\006\050\021" +
    "\027\051\033\053\032\055\047\057\024\063\041\064\015" +
    "\065\017\067\037\070\031\071\030\001\002\000\054\002" +
    "\uffbb\004\071\007\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb" +
    "\017\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\033\uffbb\037\uffbb\042\uffbb\043\uffbb\060\uffbb" +
    "\061\uffbb\001\002\000\032\006\050\021\027\051\033\053" +
    "\032\055\047\057\024\063\041\064\015\065\017\067\037" +
    "\070\031\071\030\001\002\000\054\002\uffb9\004\uffb9\007" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\017\uffb9\022\uffb9" +
    "\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033" +
    "\uffb9\037\uffb9\042\uffb9\043\uffb9\060\uffb9\061\uffb9\001\002" +
    "\000\054\002\uffbc\004\071\007\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\015\uffbc\017\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\033\uffbc\037\uffbc\042\uffbc\043" +
    "\uffbc\060\uffbc\061\uffbc\001\002\000\032\006\050\021\027" +
    "\051\033\053\032\055\047\057\024\063\041\064\015\065" +
    "\017\067\037\070\031\071\030\001\002\000\032\006\050" +
    "\021\027\051\033\053\032\055\047\057\024\063\041\064" +
    "\015\065\017\067\037\070\031\071\030\001\002\000\042" +
    "\002\uffc3\007\uffc3\011\uffc3\012\uffc3\017\uffc3\022\uffc3\023" +
    "\066\025\uffc3\026\uffc3\027\uffc3\033\uffc3\037\067\042\uffc3" +
    "\043\uffc3\060\uffc3\061\uffc3\001\002\000\006\060\uffbe\061" +
    "\uffbe\001\002\000\104\002\uffa3\004\uffa3\007\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\015\uffa3\017\uffa3\022\uffa3\023\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\037\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\001\002\000\034\006\050\021" +
    "\027\051\033\053\032\055\047\057\024\061\uffc1\063\041" +
    "\064\015\065\017\067\037\070\031\071\030\001\002\000" +
    "\004\061\103\001\002\000\104\002\uffa4\004\uffa4\007\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\015\uffa4\017\uffa4\022\uffa4\023" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4" +
    "\037\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\052\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\001\002\000\030\006" +
    "\050\051\033\053\032\055\047\057\024\063\041\064\015" +
    "\065\017\067\037\070\031\071\030\001\002\000\030\006" +
    "\050\051\033\053\032\055\047\057\024\063\041\064\015" +
    "\065\017\067\037\070\031\071\030\001\002\000\030\006" +
    "\050\051\033\053\032\055\047\057\024\063\041\064\015" +
    "\065\017\067\037\070\031\071\030\001\002\000\102\002" +
    "\uffb2\004\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2" +
    "\017\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\037\uffb2\041\110\042\uffb2\043\uffb2" +
    "\044\uffb2\046\uffb2\047\uffb2\050\uffb2\052\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\111\001\002" +
    "\000\030\006\050\051\033\053\032\055\047\057\024\063" +
    "\041\064\015\065\017\067\037\070\031\071\030\001\002" +
    "\000\030\006\050\051\033\053\032\055\047\057\024\063" +
    "\041\064\015\065\017\067\037\070\031\071\030\001\002" +
    "\000\102\002\uffae\004\uffae\007\uffae\011\uffae\012\uffae\013" +
    "\uffae\015\uffae\017\uffae\022\uffae\023\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\033\uffae\037\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\001\002\000\102\002\uffaf\004\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\015\uffaf\017\uffaf\022\uffaf\023\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\037\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\001\002\000\102\002\uffb1\004\uffb1\007" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1\022\uffb1" +
    "\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033" +
    "\uffb1\037\uffb1\041\110\042\uffb1\043\uffb1\044\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\052\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\111\001\002\000\102\002\uffb3" +
    "\004\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\017" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\037\uffb3\041\110\042\uffb3\043\uffb3\044" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\111\001\002\000" +
    "\014\013\uff9a\015\uff9a\023\066\031\uff9a\037\067\001\002" +
    "\000\010\013\uff99\015\uff99\031\uff99\001\002\000\010\013" +
    "\122\015\uff96\031\123\001\002\000\004\015\131\001\002" +
    "\000\032\006\050\021\027\051\033\053\032\055\047\057" +
    "\024\063\041\064\015\065\017\067\037\070\031\071\030" +
    "\001\002\000\032\006\050\021\027\051\033\053\032\055" +
    "\047\057\024\063\041\064\015\065\017\067\037\070\031" +
    "\071\030\001\002\000\010\013\uff98\015\uff98\031\uff98\001" +
    "\002\000\010\023\066\030\126\037\067\001\002\000\032" +
    "\006\050\021\027\051\033\053\032\055\047\057\024\063" +
    "\041\064\015\065\017\067\037\070\031\071\030\001\002" +
    "\000\014\013\uff97\015\uff97\023\066\031\uff97\037\067\001" +
    "\002\000\010\015\uff95\023\066\037\067\001\002\000\104" +
    "\002\uff9c\004\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\015" +
    "\uff9c\017\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\033\uff9c\037\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\001\002\000\104\002\uffab\004\uffab\007\uffab\011\uffab" +
    "\012\uffab\013\uffab\015\uffab\017\uffab\022\uffab\023\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\037\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\053\046\uffab\047" +
    "\uffab\050\uffab\052\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\001\002\000\030\006\uff92\051" +
    "\uff92\053\uff92\055\uff92\057\uff92\063\uff92\064\uff92\065\uff92" +
    "\067\uff92\070\uff92\071\uff92\001\002\000\030\006\uff94\051" +
    "\uff94\053\uff94\055\uff94\057\uff94\063\uff94\064\uff94\065\uff94" +
    "\067\uff94\070\uff94\071\uff94\001\002\000\030\006\uff91\051" +
    "\uff91\053\uff91\055\uff91\057\uff91\063\uff91\064\uff91\065\uff91" +
    "\067\uff91\070\uff91\071\uff91\001\002\000\030\006\uff90\051" +
    "\uff90\053\uff90\055\uff90\057\uff90\063\uff90\064\uff90\065\uff90" +
    "\067\uff90\070\uff90\071\uff90\001\002\000\030\006\uff8f\051" +
    "\uff8f\053\uff8f\055\uff8f\057\uff8f\063\uff8f\064\uff8f\065\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\001\002\000\030\006\uff93\051" +
    "\uff93\053\uff93\055\uff93\057\uff93\063\uff93\064\uff93\065\uff93" +
    "\067\uff93\070\uff93\071\uff93\001\002\000\030\006\050\051" +
    "\033\053\032\055\047\057\024\063\041\064\015\065\017" +
    "\067\037\070\031\071\030\001\002\000\076\002\uffb5\004" +
    "\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\017\uffb5" +
    "\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\033\uffb5\037\uffb5\042\uffb5\043\uffb5\044\105\046\uffb5" +
    "\047\uffb5\050\uffb5\052\uffb5\054\uffb5\055\106\056\uffb5\057" +
    "\104\060\uffb5\061\uffb5\001\002\000\006\064\015\065\017" +
    "\001\002\000\012\012\uffd1\017\uffd1\026\uffd1\027\uffd1\001" +
    "\002\000\004\046\152\001\002\000\014\012\uffce\017\uffce" +
    "\026\uffce\027\uffce\043\150\001\002\000\012\012\uffcf\017" +
    "\uffcf\026\uffcf\027\uffcf\001\002\000\006\064\015\065\017" +
    "\001\002\000\012\012\uffcd\017\uffcd\026\uffcd\027\uffcd\001" +
    "\002\000\032\006\050\021\027\051\033\053\032\055\047" +
    "\057\024\063\041\064\015\065\017\067\037\070\031\071" +
    "\030\001\002\000\020\012\uffcc\017\uffcc\023\066\026\uffcc" +
    "\027\uffcc\037\067\043\uffcc\001\002\000\010\023\066\025" +
    "\155\037\067\001\002\000\014\012\uffd0\017\uffd0\026\uffd0" +
    "\027\uffd0\043\143\001\002\000\012\012\uffd2\017\uffd2\026" +
    "\uffd2\027\uffd2\001\002\000\004\060\160\001\002\000\104" +
    "\002\uffa0\004\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\015" +
    "\uffa0\017\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\033\uffa0\037\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\052\uffa0" +
    "\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062" +
    "\uffa0\001\002\000\004\061\162\001\002\000\104\002\uffa1" +
    "\004\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\017" +
    "\uffa1\022\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\001" +
    "\002\000\054\002\uffb7\004\uffb7\007\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\015\uffb7\017\uffb7\022\uffb7\023\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\037\uffb7\042\uffb7" +
    "\043\uffb7\060\uffb7\061\uffb7\001\002\000\034\006\050\021" +
    "\027\051\033\053\032\055\047\057\024\061\uffc1\063\041" +
    "\064\015\065\017\067\037\070\031\071\030\001\002\000" +
    "\004\061\166\001\002\000\104\002\uffa2\004\uffa2\007\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\022\uffa2\023" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2" +
    "\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\001\002\000\104\002" +
    "\uffac\004\uffac\007\uffac\011\uffac\012\uffac\013\uffac\015\uffac" +
    "\017\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\033\uffac\037\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\053\046\uffac\047\uffac\050\uffac\052\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\001\002\000\006\005\171\045\022\001\002\000\034\006" +
    "\050\021\027\025\172\051\033\053\032\055\047\057\024" +
    "\063\041\064\015\065\017\067\037\070\031\071\030\001" +
    "\002\000\032\006\050\021\027\051\033\053\032\055\047" +
    "\057\024\063\041\064\015\065\017\067\037\070\031\071" +
    "\030\001\002\000\014\012\uffca\017\uffca\026\uffca\027\uffca" +
    "\042\075\001\002\000\006\025\175\042\075\001\002\000" +
    "\012\012\uffcb\017\uffcb\026\uffcb\027\uffcb\001\002\000\006" +
    "\012\uffd5\026\uffd5\001\002\000\004\026\274\001\002\000" +
    "\036\006\ufff2\016\ufffb\020\206\021\ufff2\051\ufff2\053\ufff2" +
    "\055\ufff2\057\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\001\002\000\036\006\000\016\000\020\000" +
    "\021\000\051\000\053\000\055\000\057\000\063\000\064" +
    "\000\065\000\067\000\070\000\071\000\001\002\000\004" +
    "\016\ufffa\001\002\000\032\006\050\021\027\051\033\053" +
    "\032\055\047\057\024\063\041\064\015\065\017\067\037" +
    "\070\031\071\030\001\002\000\004\016\212\001\002\000" +
    "\006\016\ufff9\043\210\001\002\000\004\014\207\001\002" +
    "\000\032\006\ufff1\021\ufff1\051\ufff1\053\ufff1\055\ufff1\057" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\001\002\000\034\006\ufff2\020\206\021\ufff2\051\ufff2\053" +
    "\ufff2\055\ufff2\057\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\001\002\000\004\016\ufff8\001\002\000" +
    "\006\064\015\065\017\001\002\000\014\002\uffef\007\uffef" +
    "\032\uffef\033\uffef\045\022\001\002\000\012\002\uffee\007" +
    "\uffee\032\215\033\uffee\001\002\000\032\006\050\021\027" +
    "\051\033\053\032\055\047\057\024\063\041\064\015\065" +
    "\017\067\037\070\031\071\030\001\002\000\010\002\uffec" +
    "\007\217\033\uffec\001\002\000\004\024\252\001\002\000" +
    "\006\002\uffe7\033\222\001\002\000\004\002\ufffe\001\002" +
    "\000\004\034\223\001\002\000\006\064\015\065\017\001" +
    "\002\000\006\002\uffe5\043\250\001\002\000\010\035\227" +
    "\036\230\045\022\001\002\000\004\002\uffe6\001\002\000" +
    "\026\046\uffe3\047\uffe3\050\uffe3\052\uffe3\054\uffe3\056\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\067\uffe3\001\002\000\026\046" +
    "\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2\056\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\067\uffe2\001\002\000\012\002\uffde\035" +
    "\227\036\230\043\uffde\001\002\000\026\046\134\047\137" +
    "\050\135\052\136\054\133\056\140\063\uffe1\064\uffe1\065" +
    "\uffe1\067\uffe1\001\002\000\006\002\uffdf\043\uffdf\001\002" +
    "\000\012\063\237\064\015\065\017\067\236\001\002\000" +
    "\012\063\uffe0\064\uffe0\065\uffe0\067\uffe0\001\002\000\014" +
    "\002\uffda\035\uffda\036\uffda\042\245\043\uffda\001\002\000" +
    "\014\002\uffdc\035\uffdc\036\uffdc\042\243\043\uffdc\001\002" +
    "\000\016\002\uffdb\035\uffdb\036\uffdb\042\241\043\uffdb\045" +
    "\022\001\002\000\006\064\015\065\017\001\002\000\014" +
    "\002\uffd7\035\uffd7\036\uffd7\043\uffd7\045\022\001\002\000" +
    "\004\063\244\001\002\000\012\002\uffd9\035\uffd9\036\uffd9" +
    "\043\uffd9\001\002\000\004\067\246\001\002\000\012\002" +
    "\uffd8\035\uffd8\036\uffd8\043\uffd8\001\002\000\006\002\uffdd" +
    "\043\uffdd\001\002\000\006\064\015\065\017\001\002\000" +
    "\004\002\uffe4\001\002\000\006\064\015\065\017\001\002" +
    "\000\010\002\uffea\033\uffea\043\uffe9\001\002\000\006\002" +
    "\uffeb\033\uffeb\001\002\000\004\043\256\001\002\000\006" +
    "\064\015\065\017\001\002\000\006\002\uffe8\033\uffe8\001" +
    "\002\000\012\002\uffed\007\uffed\033\uffed\042\075\001\002" +
    "\000\010\011\263\022\ufff6\042\075\001\002\000\004\022" +
    "\271\001\002\000\004\024\264\001\002\000\006\064\015" +
    "\065\017\001\002\000\004\022\ufff5\001\002\000\010\022" +
    "\ufff4\043\267\045\022\001\002\000\006\064\015\065\017" +
    "\001\002\000\004\022\ufff3\001\002\000\006\064\015\065" +
    "\017\001\002\000\006\016\ufff0\043\ufff0\001\002\000\006" +
    "\016\ufff7\043\ufff7\001\002\000\036\006\uffff\016\uffff\020" +
    "\uffff\021\uffff\051\uffff\053\uffff\055\uffff\057\uffff\063\uffff" +
    "\064\uffff\065\uffff\067\uffff\070\uffff\071\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\002\003\012\004\001\001\000\002\001" +
    "\001\000\004\013\177\001\001\000\012\017\010\020\007" +
    "\021\006\022\011\001\001\000\002\001\001\000\012\017" +
    "\175\020\007\021\006\022\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\015\046\167\001\001\000" +
    "\006\041\015\046\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\024" +
    "\037\026\025\027\051\030\043\031\044\032\045\033\050" +
    "\034\042\035\041\041\024\052\033\053\035\001\001\000" +
    "\004\041\022\001\001\000\002\001\001\000\014\026\025" +
    "\027\166\041\024\052\033\053\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\026\025\027\051\031\162" +
    "\032\045\033\050\034\042\035\041\041\024\052\033\053" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\023\063\024\064\026\025\027\051\030\043\031\044\032" +
    "\045\033\050\034\042\035\041\041\024\045\160\052\033" +
    "\053\035\001\001\000\040\023\063\024\064\026\025\027" +
    "\051\030\043\031\044\032\045\033\050\034\042\035\041" +
    "\041\024\044\156\045\062\052\033\053\035\001\001\000" +
    "\002\001\001\000\032\024\153\026\025\027\051\030\043" +
    "\031\044\032\045\033\050\034\042\035\041\041\024\052" +
    "\033\053\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\140\001\001\000\014\026\025\027\131\041" +
    "\024\052\033\053\035\001\001\000\034\024\115\025\116" +
    "\026\025\027\051\030\043\031\044\032\045\033\050\034" +
    "\042\035\041\041\024\052\033\053\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\023\063\024\064\026" +
    "\025\027\051\030\043\031\044\032\045\033\050\034\042" +
    "\035\041\041\024\044\061\045\062\052\033\053\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\026\025\027\051\030\072\031" +
    "\044\032\045\033\050\034\042\035\041\041\024\052\033" +
    "\053\035\001\001\000\030\026\025\027\051\030\067\031" +
    "\044\032\045\033\050\034\042\035\041\041\024\052\033" +
    "\053\035\001\001\000\002\001\001\000\026\026\025\027" +
    "\051\031\071\032\045\033\050\034\042\035\041\041\024" +
    "\052\033\053\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\023\063\024\064\026\025\027\051\030\043" +
    "\031\044\032\045\033\050\034\042\035\041\041\024\045" +
    "\076\052\033\053\035\001\001\000\032\024\075\026\025" +
    "\027\051\030\043\031\044\032\045\033\050\034\042\035" +
    "\041\041\024\052\033\053\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\023\063\024" +
    "\064\026\025\027\051\030\043\031\044\032\045\033\050" +
    "\034\042\035\041\041\024\044\101\045\062\052\033\053" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\026\025\027\051\034\114\035\041\041\024\052\033\053" +
    "\035\001\001\000\020\026\025\027\051\034\113\035\041" +
    "\041\024\052\033\053\035\001\001\000\020\026\025\027" +
    "\051\034\106\035\041\041\024\052\033\053\035\001\001" +
    "\000\002\001\001\000\016\026\025\027\051\035\112\041" +
    "\024\052\033\053\035\001\001\000\016\026\025\027\051" +
    "\035\111\041\024\052\033\053\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\117\001\001\000\006\036" +
    "\120\037\123\001\001\000\002\001\001\000\032\024\127" +
    "\026\025\027\051\030\043\031\044\032\045\033\050\034" +
    "\042\035\041\041\024\052\033\053\035\001\001\000\032" +
    "\024\124\026\025\027\051\030\043\031\044\032\045\033" +
    "\050\034\042\035\041\041\024\052\033\053\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\024\126\026" +
    "\025\027\051\030\043\031\044\032\045\033\050\034\042" +
    "\035\041\041\024\052\033\053\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\025\027\051\033\141\034\042\035\041\041\024\052" +
    "\033\053\035\001\001\000\002\001\001\000\010\014\145" +
    "\016\146\041\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\145" +
    "\016\150\041\144\001\001\000\002\001\001\000\032\024" +
    "\152\026\025\027\051\030\043\031\044\032\045\033\050" +
    "\034\042\035\041\041\024\052\033\053\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\023\063\024\064\026\025\027\051\030\043\031\044\032" +
    "\045\033\050\034\042\035\041\041\024\044\164\045\062" +
    "\052\033\053\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\023\172" +
    "\024\064\026\025\027\051\030\043\031\044\032\045\033" +
    "\050\034\042\035\041\041\024\052\033\053\035\001\001" +
    "\000\034\023\173\024\064\026\025\027\051\030\043\031" +
    "\044\032\045\033\050\034\042\035\041\041\024\052\033" +
    "\053\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\203\005\201\006\204\040\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\023\260\024\064\026\025" +
    "\027\051\030\043\031\044\032\045\033\050\034\042\035" +
    "\041\041\024\052\033\053\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\210\006\204\040\202\001\001\000\002\001\001" +
    "\000\010\003\213\041\015\046\212\001\001\000\002\001" +
    "\001\000\004\007\215\001\001\000\034\023\257\024\064" +
    "\026\025\027\051\030\043\031\044\032\045\033\050\034" +
    "\042\035\041\041\024\052\033\053\035\001\001\000\004" +
    "\010\217\001\001\000\002\001\001\000\004\054\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\041\015" +
    "\046\224\057\225\060\223\001\001\000\002\001\001\000" +
    "\010\056\231\061\230\062\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\231\061" +
    "\246\001\001\000\006\047\234\055\233\001\001\000\002" +
    "\001\001\000\006\041\015\046\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\015\046\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\041\015\046\224\057" +
    "\250\060\223\001\001\000\002\001\001\000\006\011\253" +
    "\041\252\001\001\000\004\063\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\256\041\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\015" +
    "\046\265\051\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\015\046\265\051\267\001\001\000\002" +
    "\001\001\000\006\041\271\042\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  protected Logger logger = LoggerFactory.getLogger(getClass());

  private SymbolFactory symbolFactory = new DefaultSymbolFactory() {
    public Symbol newSymbol(String name, int id, Symbol left, Symbol right, Object value){
      return new Symbol(id,left.left,right.right,value);
    }

    public Symbol newSymbol(String name, int id, Symbol left, Symbol right){
      return new Symbol(id,left.left,right.right);
    }
  };

  public CupParser(Reader reader) {
    super(new Yylex(reader));
  }

  public SymbolFactory getSymbolFactory() {
    return symbolFactory;
  }

  @Override
  public void report_error(String message, Object info) {
    if (info instanceof Symbol) {
	  if (((Symbol)info).left != -1) {
	  	 if (logger.isWarnEnabled()) {
	       logger.warn("at character " + ((Symbol)info).left +  " of input");
	     }
	  }
	}
  }

  @Override 
  public void report_fatal_error(String message, Object info) throws ParseException {
    String err = "Fatal error parsing MDX:" + message;

    if (info instanceof Symbol) {
      if (((Symbol)info).left != -1) {
        err += "\n at character " + ((Symbol)info).left +  " of input";
      } else {
        err += "\n invalid symbol \"" + ((Symbol)info).value +"\"";
       }
    } else {
      err += "\n" + info.toString();
     }

    throw new ParseException(err);
  }

  ExpressionParameter createMemberParameter(String exp) {
    return new MemberParameter(exp.substring(2, exp.length() - 1).replaceAll("]]", "]"));
  }

  ExpressionParameter createValueParameter(String exp) {
    return new ValueParameter(exp.substring(2, exp.length() - 1).replaceAll("]]", "]"));
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CupParser$actions {


  private MdxStatement pQuery = new MdxStatement();

  private final CupParser parser;

  /** Constructor */
  CUP$CupParser$actions(CupParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupParser$result;

      /* select the action based on the action number */
      switch (CUP$CupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comp_op ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comp_op",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comp_op ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comp_op",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comp_op ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comp_op",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comp_op ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comp_op",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comp_op ::= NE 
            {
              String RESULT =null;
		 RESULT = "<>"; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comp_op",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comp_op ::= EQ 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comp_op",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // else_clause_opt ::= ELSE value_expression 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = x; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("else_clause_opt",28, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else_clause_opt ::= 
            {
              Exp RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("else_clause_opt",28, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // when_clause ::= WHEN value_expression THEN value_expression 
            {
              Exp[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Exp[] { x, y }; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("when_clause",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // when_list ::= when_list when_clause 
            {
              List<Exp[]> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<Exp[]> x = (List<Exp[]>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp[] y = (Exp[])((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = x; x.add(y); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("when_list",33, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // when_list ::= 
            {
              List<Exp[]> RESULT =null;
		RESULT = new ArrayList<Exp[]>(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("when_list",33, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // value_expression_opt ::= value_expression 
            {
              Exp RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_opt",19, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // value_expression_opt ::= 
            {
              Exp RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_opt",19, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_expression ::= CASE value_expression_opt when_list else_clause_opt END 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		List<Exp[]> y = (List<Exp[]>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Exp z = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 List<Exp> v = new ArrayList<Exp>();
  	if (x != null) {
    	v.add(x);
  	}
  	for (int i = 0; i < y.size(); i++) {
    	Exp[] exps = y.get(i);
    	// Util.assertTrue(exps.length == 2);
    	v.add(exps[0]);
    	v.add(exps[1]);
  	}
  	if (z != null) {
    	v.add(z);
  	}
  	if (x == null) {
    	RESULT = new FunCall("_CaseTest", Syntax.Case, v);
  	} else {
    	RESULT = new FunCall("_CaseMatch", Syntax.Case, v);
  	}
  
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("case_expression",20, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // value_expression_primary ::= case_expression 
            {
              Exp RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // value_expression_primary ::= value_param 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionParameter e = (ExpressionParameter)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // value_expression_primary ::= member_param 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionParameter e = (ExpressionParameter)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value_expression_primary ::= LBRACE exp_list_opt RBRACE 
            {
              Exp RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 // set built from sets/tuples
  		RESULT = new FunCall("{}", Syntax.Braces, lis);
		
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value_expression_primary ::= LPAREN exp_list RPAREN 
            {
              Exp RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		
		  // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
		  // are just expressions.
		  RESULT = new FunCall("()", Syntax.Parentheses, lis);
		
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // value_expression_primary ::= identifier LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new FunCall(i, Syntax.Function, lis); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // value_expression_primary ::= value_expression_primary DOT PROPERTIES LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 lis.add(0, i); RESULT = new FunCall("Properties", Syntax.Method, lis); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // value_expression_primary ::= value_expression_primary DOT identifier LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 lis.add(0, i); RESULT = new FunCall(j, Syntax.Method, lis); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // value_expression_primary ::= value_expression_primary DOT AMP_QUOTED_ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		
		  if (i instanceof CompoundId) {
		    ((CompoundId) i).append(j.substring(1), true);
		    RESULT = i;
		  } else {
		    RESULT = new FunCall(j, Syntax.PropertyAmpQuoted, Arrays.asList(new Exp[] { i }));
		  }
	 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // value_expression_primary ::= value_expression_primary DOT QUOTED_ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		
		  if (i instanceof CompoundId) {
		    ((CompoundId) i).append(j);
		    RESULT = i;
		  } else {
		    RESULT = new FunCall(j, Syntax.PropertyQuoted, Arrays.asList(new Exp[] { i }));
		  }
	  
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // value_expression_primary ::= value_expression_primary DOT ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall(j, Syntax.Property, Arrays.asList(new Exp[] { i })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // value_expression_primary ::= identifier 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new CompoundId(i); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // value_expression_primary ::= NUMBER 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = Literal.create(d); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // value_expression_primary ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = Literal.createString(s); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression_primary",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= MINUS value_expression_primary 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("-", Syntax.Prefix, Arrays.asList(new Exp[] { p })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= PLUS value_expression_primary 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= value_expression_primary 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term ::= term SOLIDUS factor 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("/", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= term ASTERISK factor 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("*", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term2 ::= term2 CONCAT term 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("||", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term2",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term2 ::= term2 MINUS term 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("-", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term2",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term2 ::= term2 PLUS term 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("+", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term2",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term2 ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term2",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term3 ::= term3 comp_op term2 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall(op, Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term3",24, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term3 ::= term2 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term3",24, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term4 ::= NOT term4 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("NOT", Syntax.Prefix, Arrays.asList(new Exp[] { p })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term4",23, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term4 ::= term3 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term4",23, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term5 ::= term5 AND term4 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("AND", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term5",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term5 ::= term4 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("term5",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // value_expression ::= value_expression XOR term5 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("XOR", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // value_expression ::= value_expression OR term5 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunCall("OR", Syntax.Infix, Arrays.asList(new Exp[] { x, y })); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // value_expression ::= term5 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_expression",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp_list ::= expression COMMA exp_list 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 list.add(0, e);  RESULT = list;  
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("exp_list",35, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp_list ::= expression 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ArrayList();  RESULT.add(e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("exp_list",35, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp_list_opt ::= exp_list 
            {
              List RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List x = (List)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("exp_list_opt",34, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp_list_opt ::= 
            {
              List RESULT =null;
		RESULT = new ArrayList(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("exp_list_opt",34, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= value_expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = v; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression COLON value_expression 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 // range yields set
		RESULT = new FunCall(":", Syntax.Infix, Arrays.asList(new Exp[] { x, y }));
	
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value_param ::= VALUE_PARAM 
            {
              ExpressionParameter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = parser.createValueParameter(e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value_param",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // member_param ::= MEMBER_PARAM 
            {
              ExpressionParameter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = parser.createMemberParameter(e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("member_param",40, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // identifier ::= QUOTED_ID 
            {
              String RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT=y; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("identifier",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // identifier ::= ID 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("identifier",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compound_id ::= compound_id DOT identifier 
            {
              CompoundId RESULT =null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		CompoundId hd = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 hd.append(tl); RESULT = hd; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("compound_id",36, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // compound_id ::= identifier 
            {
              CompoundId RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new CompoundId(i); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("compound_id",36, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // set_spec ::= SET compound_id AS expression 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		CompoundId s = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new Formula(s, e, Formula.Type.SET); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("set_spec",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // set_spec ::= SET compound_id AS QUOTE expression QUOTE 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		CompoundId s = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new Formula(s, e, Formula.Type.SET); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("set_spec",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // member_property_definition ::= identifier EQ value_expression 
            {
              Formula.Property RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Formula.Property(id, e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("member_property_definition",10, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // member_property_def_list ::= member_property_definition COMMA member_property_def_list 
            {
              List<Formula.Property> RESULT =null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Formula.Property hd = (Formula.Property)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<Formula.Property> tl = (List<Formula.Property>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = tl; RESULT.add(0, hd); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("member_property_def_list",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // member_property_def_list ::= member_property_definition 
            {
              List<Formula.Property> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Formula.Property m = (Formula.Property)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ArrayList<Formula.Property>(); RESULT.add(m);  
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("member_property_def_list",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comma_member_property_def_list_opt ::= COMMA member_property_def_list 
            {
              List<Formula.Property> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<Formula.Property> l = (List<Formula.Property>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comma_member_property_def_list_opt",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comma_member_property_def_list_opt ::= 
            {
              List<Formula.Property> RESULT =null;
		RESULT = new ArrayList<Formula.Property>(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comma_member_property_def_list_opt",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // member_spec ::= MEMBER compound_id AS value_expression comma_member_property_def_list_opt 
            {
              Formula RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		CompoundId m = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<Formula.Property> l = (List<Formula.Property>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Formula(m, e, Formula.Type.MEMBER); RESULT.getProperties().addAll(l); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("member_spec",15, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // member_spec ::= MEMBER compound_id AS QUOTE value_expression QUOTE comma_member_property_def_list_opt 
            {
              Formula RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		CompoundId m = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<Formula.Property> l = (List<Formula.Property>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Formula(m, e, Formula.Type.MEMBER); RESULT.getProperties().addAll(l); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("member_spec",15, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // single_formula_spec ::= set_spec 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Formula s = (Formula)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("single_formula_spec",14, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // single_formula_spec ::= member_spec 
            {
              Formula RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Formula m = (Formula)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = m; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("single_formula_spec",14, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formula_spec ::= single_formula_spec formula_spec 
            {
              List<Formula> RESULT =null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Formula hd = (Formula)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<Formula> tl = (List<Formula>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 tl.add(0, hd); RESULT = tl; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("formula_spec",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formula_spec ::= single_formula_spec 
            {
              List<Formula> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Formula e = (Formula)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ArrayList<Formula>(); RESULT.add(e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("formula_spec",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sap_var_value ::= sap_var_incl sap_var_opt compound_id COLON compound_id 
            {
              SapVariable.Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		CompoundId v1 = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		CompoundId v2 = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable.Value(v1, v2, (Boolean) i, (String) o); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sap_var_value ::= sap_var_incl sap_var_opt STRING COLON STRING 
            {
              SapVariable.Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable.Value(Literal.createString((String) v1), Literal.createString((String) v2), (Boolean) i, (String) o); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sap_var_value ::= sap_var_incl sap_var_opt NUMBER COLON NUMBER 
            {
              SapVariable.Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable.Value(Literal.create((Double) v1), Literal.create((Double) v2), (Boolean) i, (String) o); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sap_var_value ::= sap_var_incl sap_var_opt STRING 
            {
              SapVariable.Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable.Value(Literal.createString((String) v), (Boolean) i, (String) o); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sap_var_value ::= sap_var_incl sap_var_opt compound_id 
            {
              SapVariable.Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		CompoundId v = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable.Value(v, (Boolean) i, (String) o); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sap_var_value ::= sap_var_incl sap_var_opt NUMBER 
            {
              SapVariable.Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable.Value(Literal.create((Double) v), (Boolean) i, (String) o); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sap_var_value_set ::= sap_var_value sap_var_value 
            {
              List<SapVariable.Value> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		SapVariable.Value v1 = (SapVariable.Value)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		SapVariable.Value v2 = (SapVariable.Value)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 List<SapVariable.Value> lst = new ArrayList<SapVariable.Value>(); lst.add(v1); lst.add(v2); RESULT = lst; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value_set",48, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sap_var_value_set ::= sap_var_value 
            {
              List<SapVariable.Value> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		SapVariable.Value v = (SapVariable.Value)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 List<SapVariable.Value> lst = new ArrayList<SapVariable.Value>(); lst.add(v); RESULT = lst; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_value_set",48, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sap_var_spec ::= compound_id sap_var_value_set 
            {
              SapVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		CompoundId id = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<SapVariable.Value> v = (List<SapVariable.Value>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SapVariable(id); RESULT.getValues().addAll(v); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_spec",46, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sap_var_opt ::= comp_op 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_opt",43, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sap_var_opt ::= 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_opt",43, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sap_var_incl ::= EXCLUDING 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_incl",44, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sap_var_incl ::= INCLUDING 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_incl",44, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sap_var_list ::= sap_var_spec COMMA sap_var_list 
            {
              List<SapVariable> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		SapVariable s = (SapVariable)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		 pQuery.getSapVariables().add(0, s); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_list",45, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sap_var_list ::= sap_var_spec 
            {
              List<SapVariable> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		SapVariable s = (SapVariable)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 pQuery.getSapVariables().add(s); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_list",45, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sap_var_def ::= SAP VARIABLES sap_var_list 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_def",42, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sap_var_def ::= 
            {
              Object RESULT =null;
		 pQuery.getSapVariables().clear(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sap_var_def",42, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cell_prop_list ::= identifier NT$0 COMMA cell_prop_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("cell_prop_list",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
 pQuery.getCellProperties().add(new CompoundId(id)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cell_prop_list ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 pQuery.getCellProperties().add(new CompoundId(id)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("cell_prop_list",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cell_prop_def ::= CELL PROPERTIES cell_prop_list 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("cell_prop_def",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cell_prop_def ::= 
            {
              Object RESULT =null;
		 pQuery.getCellProperties().clear(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("cell_prop_def",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // slicer_def ::= WHERE expression 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 pQuery.setSlicer(x); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("slicer_def",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // slicer_def ::= 
            {
              Object RESULT =null;
		 pQuery.setSlicer(null); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("slicer_def",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cube_def ::= compound_id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		CompoundId x = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 pQuery.setCube(x); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("cube_def",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // axis_name ::= identifier 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = x; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("axis_name",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // non_empty_opt ::= NON EMPTY 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("non_empty_opt",30, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // non_empty_opt ::= 
            {
              Boolean RESULT =null;
		RESULT = false; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("non_empty_opt",30, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dim_prop_list ::= compound_id COMMA dim_prop_list 
            {
              List<CompoundId> RESULT =null;
		int cid2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int cid2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		CompoundId cid2 = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int dplleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int dplright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<CompoundId> dpl = (List<CompoundId>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = dpl; dpl.add(cid2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("dim_prop_list",39, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dim_prop_list ::= compound_id 
            {
              List<CompoundId> RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		CompoundId cid = (CompoundId)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 List<CompoundId> lst = new ArrayList<CompoundId>();
                                   lst.add(cid); RESULT = lst; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("dim_prop_list",39, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dim_props ::= DIMENSION PROPERTIES dim_prop_list 
            {
              List<CompoundId> RESULT =null;
		int dplistleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int dplistright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<CompoundId> dplist = (List<CompoundId>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = dplist; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("dim_props",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dim_props ::= 
            {
              List<CompoundId> RESULT =null;
		 RESULT = new ArrayList<CompoundId>(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("dim_props",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // axis_spec ::= non_empty_opt expression dim_props ON axis_name 
            {
              QueryAxis RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int dpropsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int dpropsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		List<CompoundId> dprops = (List<CompoundId>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new QueryAxis(Axis.Standard.valueOf(a.toUpperCase()), s, b.booleanValue()); 
		   if (dprops !=null) RESULT.getDimensionProperties().addAll(dprops); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("axis_spec",4, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // axis_spec_list ::= axis_spec COMMA axis_spec_list 
            {
              List<QueryAxis> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		QueryAxis e = (QueryAxis)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<QueryAxis> list = (List<QueryAxis>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 list.add(0, e); RESULT = list; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("axis_spec_list",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // axis_spec_list ::= axis_spec 
            {
              List<QueryAxis> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		QueryAxis i = (QueryAxis)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ArrayList<QueryAxis>(); RESULT.add(i); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("axis_spec_list",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axis_def ::= axis_spec_list 
            {
              List<QueryAxis> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<QueryAxis> l = (List<QueryAxis>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 pQuery.getAxes().clear(); pQuery.getAxes().addAll(l); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("axis_def",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axis_def ::= 
            {
              List<QueryAxis> RESULT =null;
		 pQuery.getAxes().clear(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("axis_def",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // with_clause ::= WITH formula_spec 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<Formula> f = (List<Formula>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 pQuery.getFormulas().clear(); pQuery.getFormulas().addAll(f); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("with_clause",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // with_clause ::= 
            {
              Object RESULT =null;
		 pQuery.getFormulas().clear(); /* empty */  
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("with_clause",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mdx_statement ::= with_clause sel_clause axis_def FROM cube_def slicer_def cell_prop_def sap_var_def 
            {
              MdxStatement RESULT =null;
		 RESULT = pQuery; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("mdx_statement",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-7)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sel_clause ::= DRILLTHROUGH SELECT 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sel_clause",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sel_clause ::= SELECT 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("sel_clause",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mdx_statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		MdxStatement start_val = (MdxStatement)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		RESULT = start_val;
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupParser$parser.done_parsing();
          return CUP$CupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

